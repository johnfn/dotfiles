(ns resolution.sample
  (:import resolution.core))

;; initialization and update of state have really similar parts. I wonder if they can
;; be joined together somehow.

;; TODO: type is a redundancy here.
(res-init
  { :player {:x 5 :y 5 :color 'red :type :player}
    :background-color {:color 'white :type :color}
  })


(res-update [old-state keys]
  ;;these multimethods must be defined inside res-update in order to gain
  ;; closures over state etc. 
            
  (defmulti update-object [object] :type)

  (defmethod update-player :player
    {:x 4 :y 4 :type :player})
  (defmethod update-color :color
    {:color 'white :type :color})

  (doall (map #(update-object % old-state keys) old-state)))

(res-loop [{screen :screen} game-stuff] ;for lack of a better generalizeable word
  (loop {:screen screen
         :game-state state}
    (render-game)
    (recur
     {:screen screen
      :game-state (res-update game-state)
      })
    ))

(defn init[]
  (res-start))
